install.packages("devtools")
library(devtools)
getwd()
create_package(getwd())
library(arrow)
library(dplyr)
library(devtools)
library(usethis)
library(testthat)
library(sf)
library(tigris)
options(tigris_use_cache = TRUE)
library(cli)
list_spinners()
demo_spinners()
demo_spinners('arrow')
demo_spinners('clock')
demo_spinners('speaker')
demo_spinners('point')
demo_spinners('pipe')
demo_spinners('balloon')
options(cli.progress_format_download =
paste0(
"{cli::col_cyan('\u2B07')} {cli::pb_spin} ",
"{cli::pb_name}[{cli::pb_current_bytes}/{cli::pb_total_bytes}]"
)
)
options(cli.progress_format_download =
paste0(
"{cli::col_cyan('\u2B07')} {cli::pb_spin} ",
"{cli::pb_name}[{cli::pb_current_bytes}/{cli::pb_total_bytes}]"
)
)
SEXP progress_test1() {
options(cli.progress_format_download =
paste0(
"{cli::col_cyan('\u2B07')} {cli::pb_spin} ",
"{cli::pb_name}[{cli::pb_current_bytes}/{cli::pb_total_bytes}]"
)
)
options(cli.progress_bar_style = list(
complete = cli::col_yellow("\u2605"),
incomplete = cli::col_grey("\u00b7")
))
f <- function() lapply(cli_progress_along(letters), function(l) Sys.sleep(0.2))
x <- f()
ticking()
options(cli.progress_format_download =
paste0(
"{cli::col_cyan('\u2B07')} {cli::pb_spin} ",
"{cli::pb_name}[{cli::pb_current_bytes}/{cli::pb_total_bytes}]"
)
)
options(cli.progress_format_download =
paste0(
"{cli::col_cyan('\u2B07')} {cli::pb_spin} ",
"{cli::pb_name}[{cli::pb_current_bytes}/{cli::pb_total_bytes}]"
)
)
options(cli.progress_format_download =
paste0(
"{cli::col_cyan('\u2B07')} {cli::pb_spin} ",
"{cli::pb_name}[{cli::pb_current_bytes}/{cli::pb_total_bytes}]"
)
)
options(cli.progress_format_download =
paste0(
"{cli::col_cyan('\u2B07')} {cli::pb_spin} ",
"{cli::pb_name}[{cli::pb_current_bytes}/{cli::pb_total_bytes}]"
)
)
options(cli.progress_format_download =
paste0(
"{cli::col_cyan('\u2B07')} {cli::pb_spin} ",
"{cli::pb_name}[{cli::pb_current_bytes}/{cli::pb_total_bytes}]"
)
)
options(cli.progress_format_download =
paste0(
"{cli::col_cyan('\u2B07')} {cli::pb_spin} ",
"{cli::pb_name}[{cli::pb_current_bytes}/{cli::pb_total_bytes}]"
)
)
options(cli.progress_format_download =
paste0(
"{cli::col_cyan('\u2B07')} {cli::pb_spin} ",
"{cli::pb_name}[{cli::pb_current_bytes}/{cli::pb_total_bytes}]"
)
)
library(arrow)
library(sf)
library(dplyr)
dataset_path <- function(overture_type) {
type_theme_map <- list(
"locality" = "admins",
"locality_area" = "admins",
"administrative_boundary" = "admins",
"building" = "buildings",
"building_part" = "buildings",
"division" = "divisions",
"division_area" = "divisions",
"place" = "places",
"segment" = "transportation",
"connector" = "transportation",
"infrastructure" = "base",
"land" = "base",
"land_cover" = "base",
"land_use" = "base",
"water" = "base"
)
theme <- type_theme_map[[overture_type]]
return(paste0("s3://overturemaps-us-west-2/release/2024-06-13-beta.0/theme=", theme, "/type=", overture_type, "/"))
}
# Function to filter and convert to sf
filter_and_convert_sf <- function(buildings, sf_bbox = NULL) {
if (!is.null(sf_bbox)) {
xmin <- sf_bbox[1]
ymin <- sf_bbox[2]
xmax <- sf_bbox[3]
ymax <- sf_bbox[4]
# Function to apply to each batch
filter_fun <- function(batch) {
filtered <- batch %>%
filter(bbox$xmin > xmin,
bbox$ymin > ymin,
bbox$xmax < xmax,
bbox$ymax < ymax)
return(filtered)
}
# Apply the filtering function to each batch
non_empty_batches <- map_batches(buildings, filter_fun, .lazy = FALSE)
# Combine all non-empty batches into a single data frame
combined <- bind_rows(non_empty_batches)
} else {
combined <- NULL
}
return(combined)
}
sf_bbox <- counties(state = "CA", cb = TRUE, resolution = "20m") |>
filter(NAME == "San Francisco") |>
st_bbox() |>
as.vector()
buildings <- open_dataset(dataset_path('building'))  # Open the dataset
sf_buildings <- filter_and_convert_sf(buildings, sf_bbox)  # Filter and convert to sf object
filter_and_convert_sf <- function(buildings, sf_bbox = NULL) {
if (!is.null(sf_bbox)) {
filtered_df <- buildings %>%
filter(bbox$xmin > sf_bbox[1],
bbox$ymin > sf_bbox[2],
bbox$xmax < sf_bbox[3],
bbox$ymax < sf_bbox[4]) %>%
collect() %>%
st_as_sf(crs = 4326)
} else {
filtered <- NULL
}
return(filtered_df)
}
install.packages('tictoc')
library(tictoc)
tic()
sf_buildings <- filter_and_convert_sf(buildings, sf_bbox)  # Filter and convert to sf object
filter_and_convert_sf <- function(buildings, sf_bbox = NULL) {
if (!is.null(sf_bbox)) {
filtered_df <- buildings %>%
filter(bbox$xmin > sf_bbox[1],
bbox$ymin > sf_bbox[2],
bbox$xmax < sf_bbox[3],
bbox$ymax < sf_bbox[4]) %>%
collect() %>%
st_as_sf(crs = 4326)
} else {
filtered <- NULL
}
return(filtered_df)
}
tic()
sf_buildings <- filter_and_convert_sf(buildings, sf_bbox)  # Filter and convert to sf object
toc()
get_all_overture_types <- function() {
type_theme_map = list(
"locality" = "admins",
"locality_area" = "admins",
"administrative_boundary" = "admins",
"building" = "buildings",
"building_part" = "buildings",
"division" = "divisions",
"division_area" = "divisions",
"place" = "places",
"segment" = "transportation",
"connector" = "transportation",
"infrastructure" = "base",
"land" = "base",
"land_cover" = "base",
"land_use" = "base",
"water" = "base"
)
return(names(type_theme_map))
}
if('building' %in% get_all_overture_types())
{}
if('building' %in% get_all_overture_types()){
print(get_all_overture_types()['building'])
}
get_all_overture_types()['building']
types_ <- get_all_overture_types()
types_
types_['building']
types_[['building']]
types_[['building']]
types_[[building]]
types_[["building"]]
get_all_overture_types <- function() {
type_theme_map = list(
"locality" = "admins",
"locality_area" = "admins",
"administrative_boundary" = "admins",
"building" = "buildings",
"building_part" = "buildings",
"division" = "divisions",
"division_area" = "divisions",
"place" = "places",
"segment" = "transportation",
"connector" = "transportation",
"infrastructure" = "base",
"land" = "base",
"land_cover" = "base",
"land_use" = "base",
"water" = "base"
)
return(type_theme_map)
}
types_ <- get_all_overture_types()
types_[["building"]]
if('building' %in% get_all_overture_types()){
print(get_all_overture_types()['building'])
}
document()
git status
record_batch_reader <- function(overture_type, sf_bbox = NULL){
filtered_df <- open_dataset(dataset_path(overture_type)) %>%
filter(bbox$xmin > sf_bbox[1],
bbox$ymin > sf_bbox[2],
bbox$xmax < sf_bbox[3],
bbox$ymax < sf_bbox[4]) %>%
collect() %>%
st_as_sf(crs = 4326)
return(filtered_df)
}
places_df <- record_batch_reader('place', sf_bbox = sf_bbox)
places_df %>% head()
places_df %>% head() %>% View()
places_df %>% head() %>% View()
View(.[[9]][[1]])
sf_buildings %>% head() %>% View()
dataset_path
dataset_path('building')
dataset_path <- function(overture_type) {
type_theme_map = list(
"locality" = "admins",
"locality_area" = "admins",
"administrative_boundary" = "admins",
"building" = "buildings",
"building_part" = "buildings",
"division" = "divisions",
"division_area" = "divisions",
"place" = "places",
"segment" = "transportation",
"connector" = "transportation",
"infrastructure" = "base",
"land" = "base",
"land_cover" = "base",
"land_use" = "base",
"water" = "base"
)
theme = type_theme_map[[overture_type]]
return(paste0("s3://overturemaps-us-west-2/release/2024-05-16-beta.0/theme=",theme, "?region=us-west-2"))
}
record_batch_reader <- function(overture_type, sf_bbox = NULL){
filtered_df <- open_dataset(dataset_path(overture_type)) %>%
filter(bbox$xmin > sf_bbox[1],
bbox$ymin > sf_bbox[2],
bbox$xmax < sf_bbox[3],
bbox$ymax < sf_bbox[4]) %>%
collect() %>%
st_as_sf(crs = 4326)
return(filtered_df)
}
places_df <- record_batch_reader('place', sf_bbox = sf_bbox)
places_df %>% head %>% View()
use_r('core.R')
type_theme_map = list(
"locality" = "admins",
"locality_area" = "admins",
"administrative_boundary" = "admins",
"building" = "buildings",
"building_part" = "buildings",
"division" = "divisions",
"division_area" = "divisions",
"place" = "places",
"segment" = "transportation",
"connector" = "transportation",
"infrastructure" = "base",
"land" = "base",
"land_cover" = "base",
"land_use" = "base",
"water" = "base"
)
type_theme_map
get_all_overture_types <- function() {
return(names(type_theme_map))
}
get_all_overture_types()
dataset_path('place')
dataset_path <- function(overture_type) {
theme = type_theme_map[[overture_type]]
return(paste0("s3://overturemaps-us-west-2/release/2024-05-16-beta.0/theme=",theme, "?region=us-west-2"))
}
dataset_path('place')
type_theme_map = list('dennis' = "irorere")
get_all_overture_types()
documents
document()
document()
document()
check()
testthat_examples()
use_testthat('test_core.R')
all_type_theme_map <- function(){
type_theme_map = list(
"locality" = "admins",
"locality_area" = "admins",
"administrative_boundary" = "admins",
"building" = "buildings",
"building_part" = "buildings",
"division" = "divisions",
"division_area" = "divisions",
"place" = "places",
"segment" = "transportation",
"connector" = "transportation",
"infrastructure" = "base",
"land" = "base",
"land_cover" = "base",
"land_use" = "base",
"water" = "base"
)
return(type_theme_map)
}
all_type_theme_map()
all_type_theme_map()[['locality']]
names(all_type_theme_map())
type_theme_map = all_type_theme_map()
type_theme_map
use_test('test-1-core.R')
test_type <- "buildings"
expected_path <- paste0("s3://overturemaps-us-west-2/release/2024-05-16-beta.0/theme=",test_type, "?region=us-west-2")
expected_path
check()
result <- get_all_overture_types()
result
names(all_type_theme_map())
sort(names(all_type_theme_map()))
len(names(all_type_theme_map()))
length(names(all_type_theme_map()))
length(result)
test_check()
check()
document()
document()
document()
check()
type_theme_map = list(
"locality" = "admins",
"locality_area" = "admins",
"administrative_boundary" = "admins",
"building" = "buildings",
"building_part" = "buildings",
"division" = "divisions",
"division_area" = "divisions",
"place" = "places",
"segment" = "transportation",
"connector" = "transportation",
"infrastructure" = "base",
"land" = "base",
"land_cover" = "base",
"land_use" = "base",
"water" = "base"
)
expected_types <- names(type_theme_map)
result <- get_all_overture_types()
expect_length(length(result), length(expected_types))
length(result)
length(expected_types)
expect_length(length(result), length(expected_types))
expect_length(result, length(expected_types))
test_type <- "building"
expected_path <- paste0("s3://overturemaps-us-west-2/release/2024-05-16-beta.0/theme=buildings?region=us-west-2")
result <- dataset_path(test_type)
expect_equal(result, expected_path)
expect_equal(sort(result), sort(expected_types))
expected_types <- names(type_theme_map)
result <- get_all_overture_types()
expect_equal(sort(result), sort(expected_types))
expect_length(result, length(expected_types))
expect_type(result, "character")
test_type <- "building"
expected_path <- paste0("s3://overturemaps-us-west-2/release/2024-05-16-beta.0/theme=buildings?region=us-west-2")
result <- dataset_path(test_type)
expect_type(result, "character")
expect_equal(result, expected_path)
check()
export(all_type_theme_map())
source("C:/Users/Dee/root/Projects/dev/devR/overturemapsr/R/utils.R", echo=TRUE)
document()
install()
library(overturemapsr)
overturemapsr::dataset_path('place')
check()
load_all()
load_all()
check()
type_theme_map = list(
"locality" = "admins",
"locality_area" = "admins",
"administrative_boundary" = "admins",
"building" = "buildings",
"building_part" = "buildings",
"division" = "divisions",
"division_area" = "divisions",
"place" = "places",
"segment" = "transportation",
"connector" = "transportation",
"infrastructure" = "base",
"land" = "base",
"land_cover" = "base",
"land_use" = "base",
"water" = "base"
)
expected_types <- names(type_theme_map)
result <- get_all_overture_types()
expect_type(result, "character")
result <- get_all_overture_types()
load_all()
get_all_overture_types
check()
load_all()
check()
use_readme_rmd()
renv::status()
?renv::status()
library
